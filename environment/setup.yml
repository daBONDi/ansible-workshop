- name: "Ensure Workshop AWS Setup"
  hosts: localhost
  gather_facts: false
  vars_files:
    - env_config.yml
  vars:
    workshop: "{{ workshop_configuration}}"

  tasks:
    - name: "Ensure AWS EC2 key pair {{ workshop.aws.keypair.name }}"
      ec2_key:
        region: "{{ workshop.aws.region }}"
        name: "{{ workshop.aws.keypair.name }}"
        key_material: "{{ workshop.aws.keypair.value }}"

    - name: "Ensure workshop AWS VPC {{ workshop.aws.vpc.base_name }}"
      ec2_vpc_net:
        name: "{{ workshop.aws.vpc.base_name }}"
        region: "{{ workshop.aws.region }}"
        cidr_block: "{{ workshop.aws.vpc.cidr }}"
        tags:
          workshop: "{{ workshop.name }}"
        state: present
      register: vpc_network

    - name: "Ensure workshop vpc {{ workshop.name }} has an igw(Internet Gateway)"
      ec2_vpc_igw:
        region: "{{ workshop.aws.region }}"
        vpc_id: "{{ vpc_network.vpc.id }}"
        state: present
        tags:
          Name: "{{ workshop.name }}"
          workshop: "{{ workshop.name }}"
      register: vpc_igw

    - name: "Find default route table for vpc {{ workshop.name }}"
      ec2_vpc_route_table_facts:
        region: "{{ workshop.aws.region }}"
        filters:
          vpc_id: "{{ vpc_network.vpc.id }}"
          # Get the Main Route Table
          "association.main": "true"
      register: vpc_default_route

    - name: "Ensure vpc {{ workshop.name }} has route to default igw(internet gateway)"
      ec2_vpc_route_table:
        route_table_id: "{{ vpc_default_route.route_tables[0].id }}"
        lookup: id
        tags:
          Name: "{{ workshop.name }}"
          workshop: "{{ workshop.name }}"
        region: "{{ workshop.aws.region }}"
        vpc_id: "{{ vpc_network.vpc.id }}"
        routes:
          - dest: "0.0.0.0/0"
            gateway_id: "{{ vpc_igw.gateway_id }}"

    - name: "Ensure vpc {{ workshop.name }} has subnet {{ workshop.aws.vpc.cidr }}"
      ec2_vpc_subnet:
        region: "{{ workshop.aws.region }}"
        vpc_id: "{{ vpc_network.vpc.id }}"
        cidr: "{{ workshop.aws.vpc.cidr }}"
        tags:
          Name: "{{ workshop.name }}"
          workshop: "{{ workshop.name }}"
      register: vpc_subnet
    
    - name: "Ensure security group configuration for vpc {{ workshop.name }}"
      ec2_group:
        name: "{{ workshop.name }}"
        description: "{{ workshop.name }} default security group"
        region: "{{ workshop.aws.region }}"
        vpc_id: "{{ vpc_network.vpc.id }}"
        tags:
          Name: "{{ workshop.name }}"
          workshop: "{{ workshop.name }}"
        rules:
          - proto: tcp
            ports: 
              - 80
              - 443
              - 22
              - 5985
              - 5986
            cidr_ip: 0.0.0.0/0
            cidr_ipv6: ::/0
        state: present
      register: vpc_default_security_group

    - name: "Ensure EC2 Instances"
      include_tasks: playbooks/create_ec2_instance.yml
      vars:
        security_group_id: "{{ vpc_default_security_group.group_id }}"
        subnet_id: "{{ vpc_subnet.subnet.id }}"
      with_sequence: start=1 end="{{ workshop.attendant_count }}"
      loop_control:
        loop_var: attendant_id

    - name: "Wait for EC2 Instances to finish base loading"
      pause:
        seconds: 10

    - name: "Create attendant documents"
      include_tasks: playbooks/create_attendant_document.yml
      with_sequence: start=1 end="{{ workshop.attendant_count }}"
      loop_control:
        loop_var: attendant_id